# ---
# name: Deploy with Helm

# on:
#   push:
#     branches: [master]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       - name: Deploy
#         uses: ivido/helm-deploy@v1
#         with:
#           release: my-release
#           namespace: my-namespace
#           chart: ./chart
#           value-files: "./chart/values.yaml"
#           secrets-files: "./chart/secrets.yaml"
#           tag: ${{ github.sha }}
#         env:
#           KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}
#           GCP_KMS_KEY_FILE: ${{ secrets.GCP_KMS_KEY }}



---
name: GitHub Actions (Deploy app to AKS cluster using helm chart)
on:
  push:
    branches: [master]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."






  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Deploy
        uses: ivido/helm-deploy@v1
        with:
          release: nextflow-api
          namespace: default
          chart: ./helm
          value-files: "./helm/values.yaml"
          # secrets-files: "./helm/secrets.yaml"
          tag: ${{ github.sha }}
        env:
          # KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}
          KUBECONFIG_FILE: ${{ secrets.FAKE_KUBECONFIG }}
          # GCP_KMS_KEY_FILE: ${{ secrets.GCP_KMS_KEY }}

      # - name: Test k8s is properly connected to kubectl
      #   run: |
      #     kubectl get nodes


